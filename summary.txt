you are given a graph that has some source node and a diestination node.
path is defined as the sum of the weight of edges traversed to reach the 
end node. The diskstra algo garentees the minimum path.


- picks the unvisited vertex with the lowest distance, (mark this visited)
- calculates the distance through it to each unvisited neighbor, 
  and updates the neighbor's distance if smaller. 
- and repeat this until we visited all nodes.
- this algorithm works as we always move to a new node by choicing the 
  minimum path.


https://www.freecodecamp.org/news/dijkstras-shortest-path-algorithm-visual-introduction/

we have an distace array that represents the min distance to reach this
node from source node. Initially this have infinite value.
distace of start node will be zero.
we start our traversal from start node and maintain the current distane.
we move to all its neighboring
nodes and now the ditance to reach this node can be represented as
sum of weight from 


challenges
- how to retrace the path 
- learned about the algorithm 
- how to speed up the algorithm 





story of why i created this?
The first day of my college one of my senior was taking a 
session and he asked what is the algorithm used in google maps to exisimate the quickest path to reach the destination considering the traffic.

how i created?


Major obstacles and how i handled it?




Did this in just 4 files 

#  Tutorial component:
   
   - It is the very first component renderd when site is   
     clicked 
   - It is a simple popup which gives the brief information  
     about the symbols used  

#  Node component :
 
   - The simplest component all that it is use to render the 
     node and decide what should be filled inside these node and helps in identifing the type of node 

   - Each node have some properites like 
	     isStart 
	     isFinish
	     isWall 
	     isWeight 
   - These properties can be handled using three mouse 
     handlers 
	     onMouseDown
	     onMouseEnter
	     onMouseUp
   - In these different functions are called for wall and    
     weigth

#   pfv   :
   
   - The position of start and end node can be changed 
     using controllers present at the top this is handled using pointChangeHandler function 
   - To change weight there is weightChangeHandler 
     function 
   - To avoid changing nodes while algo is running and after completion I 
     have used topMessage string that tells the current state that wether algo is not yet started or running or finised

#    Dijkstra :
   -  it is the algo used to find the shortest path in weighted graph.
   -  the grid can be considered as a connected graph where every node sharing
      edge are connected except the wall.
   -  the weight on the node indicated the weight of the path.
   -  it is the greedy algoritm 
       * this component exports two array one to visulize the algo how we are 
         going to adjcant node and the other to renders the shortest path.
       * the all node have distace INF except the start node then.
       * the we select the closest node and push this node to the 
         visulizeNodeInOrder find the distance between this   
         node and all the child except the visited one if it can be minimized we minimze it and put the value of node into the previesNode variable it form ans linkedlinklist which is use to retrace the shortest path.
       * now from all the remaining node we find the closest node if its INF
         then we cant reach the finish point if its finish point the we return the two arrays.
   -   these two array are passed to animate dijkstra function this will iterate to
       all the nodesVisited in algo and create the effect when it reaches the lastNode an another function is called to display the shortestPath this will iterate to all the nodes in shortest path array and create this effect.
       

      
A pathfinding visualizer using Dijkstra's algorithm is a tool that allows users to visualize how Dijkstra's algorithm works to find the shortest path between two points on a graph.

Dijkstra's algorithm is a graph search algorithm that works by starting at the initial node and then iteratively visiting the neighboring nodes that are closest to the starting node. It maintains a list of the shortest known distances from the starting node to all other nodes, and it updates this list as it visits each node.

A pathfinding visualizer using Dijkstra's algorithm typically allows users to specify the starting and ending nodes on the graph, and then displays the shortest path between them. As the algorithm runs, the nodes that have been visited are typically highlighted, and the distance and path from the starting node to each node is displayed.

This type of visualizer can be useful for understanding how Dijkstra's algorithm works, and for testing and debugging algorithms on different types of graphs or networks. It can also be used in practical applications such as finding the shortest path between two points in a transportation network or road system.










Created a reliable backend architecture using Node.js, Express.js, and MongoDB to drive our client's ecommerce website.

Added security by constructing authentication system that allows users to establish an account and reset their password via email.


learned to use postman for api testing. 


